// Generated by CoffeeScript 1.9.2
var Session;

Session = require('./session');

module.exports = function(httpaddr, options) {
  var createsession, ondown, onup, renewsession, session, tickinterval, timeout;
  if (options == null) {
    options = {};
  }
  if (options.ttl == null) {
    options.ttl = 10;
  }
  tickinterval = options.ttl * 1000;
  options.ttl = options.ttl + "s";
  session = Session(httpaddr, options);
  timeout = null;
  onup = null;
  ondown = null;
  createsession = function() {
    return session.create(function(success) {
      if (!success) {
        ondown();
        console.error("Retrying in " + options.ttl);
        timeout = setTimeout(createsession, tickinterval);
        return;
      }
      timeout = setTimeout(renewsession, tickinterval);
      return onup();
    });
  };
  renewsession = function() {
    return session.renew(function(success) {
      if (!success) {
        ondown();
        console.error("Retrying in " + options.ttl);
        timeout = setTimeout(createsession, tickinterval);
        return;
      }
      timeout = setTimeout(renewsession, tickinterval);
      return onup();
    });
  };
  return {
    run: function(options) {
      var ref, ref1;
      onup = (ref = options.onup) != null ? ref : function() {};
      ondown = (ref1 = options.ondown) != null ? ref1 : function() {};
      if (timeout != null) {
        return console.error('Already running');
      }
      return createsession();
    },
    destroy: function(cb) {
      if (timeout != null) {
        clearTimeout(timeout);
      }
      if (!session.isvalid()) {
        if (cb != null) {
          cb();
        }
        return;
      }
      return session.destroy(function(success) {
        if (!success) {
          console.error('Session unable to be destroyed');
        }
        ondown();
        if (cb != null) {
          return cb();
        }
      });
    },
    isvalid: session.isvalid,
    id: session.id
  };
};
