// Generated by CoffeeScript 1.8.0
var findreplace, http, url_parse;

http = require('http');

url_parse = require('url').parse;

findreplace = function(httpAddr, key, find, replace, callback) {
  var getparams;
  getparams = {
    hostname: httpAddr.hostname,
    port: httpAddr.port,
    path: "/v1/kv/" + key
  };
  return this._httpRequest = http.get(getparams, function(res) {
    var content, error;
    res.setEncoding('utf8');
    if (res.statusCode !== 200) {
      error = '';
      res.on('data', function(data) {
        return error += data;
      });
      return res.on('end', function() {
        console.log("Error updating " + key);
        console.log({
          code: res.statusCode,
          error: error
        });
        return callback();
      });
    }
    content = '';
    res.on('data', (function(_this) {
      return function(data) {
        return content += data;
      };
    })(this));
    return res.on('end', (function(_this) {
      return function() {
        var buf, putparams, req, result;
        result = JSON.parse(content);
        buf = new Buffer(result[0].Value, 'base64');
        result = buf.toString();
        result = result.replace(new RegExp(find, 'g'), replace);
        putparams = {
          hostname: httpAddr.hostname,
          port: httpAddr.port,
          path: "/v1/kv/" + key,
          method: 'PUT'
        };
        req = http.request(putparams, function(res) {
          res.setEncoding('utf8');
          if (res.statusCode !== 200) {
            error = '';
            res.on('data', function(data) {
              return error += data;
            });
            return res.on('end', function() {
              console.log("Error updating " + key);
              console.log({
                code: res.statusCode,
                error: error
              });
              return callback();
            });
          }
          res.on('data', function() {});
          return res.on('end', function() {
            console.log("Updated " + key);
            return callback();
          });
        });
        req.write(result);
        return req.end();
      };
    })(this));
  });
};

module.exports = function(httpAddr, keys, find, replace, callback) {
  var count, key, _i, _len, _results;
  find = find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  if (typeof httpAddr === 'string') {
    if (httpAddr.indexOf('http://') !== 0) {
      httpAddr = "http://" + httpAddr;
    }
    httpAddr = url_parse(httpAddr);
  }
  count = 0;
  _results = [];
  for (_i = 0, _len = keys.length; _i < _len; _i++) {
    key = keys[_i];
    _results.push(findreplace(httpAddr, key, find, replace, function() {
      count++;
      if (count === keys.length) {
        return callback();
      }
    }));
  }
  return _results;
};
