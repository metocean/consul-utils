// Generated by CoffeeScript 1.8.0
var DiffPool, expect;

expect = require('chai').expect;

DiffPool = require('../src/diff-pool');

describe('Diff Pool', function() {
  it('should handle an empty array', function() {
    var passed, pool;
    passed = true;
    pool = new DiffPool(function(added, removed) {
      return passed = false;
    });
    pool.set([]);
    return expect(passed).to.be["true"]();
  });
  it('should pass new items in added', function() {
    var passed, pool;
    passed = false;
    pool = new DiffPool(function(added, removed) {
      expect(added).to.have.length.of(1);
      expect(removed).to.be.empty();
      return passed = true;
    });
    pool.set([
      {
        name: 'bob'
      }
    ]);
    return expect(passed).to.be["true"]();
  });
  it('should pass removed items in removed', function() {
    var func, passed, pool;
    func = function() {};
    pool = new DiffPool(function(added, removed) {
      return func(added, removed);
    });
    pool.set([
      {
        name: 'bob'
      }
    ]);
    passed = false;
    func = function(added, removed) {
      expect(added).to.be.empty();
      expect(removed).to.have.length.of(1);
      return passed = true;
    };
    pool.set([]);
    return expect(passed).to.be["true"]();
  });
  it('should not callback on duplicate items', function() {
    var func, passed, pool;
    func = function() {};
    pool = new DiffPool(function(added, removed) {
      return func(added, removed);
    });
    pool.set([
      {
        name: 'bob'
      }
    ]);
    passed = true;
    func = function(added, removed) {
      return passed = false;
    };
    pool.set([
      {
        name: 'bob'
      }
    ]);
    return expect(passed).to.be["true"]();
  });
  it('should handle added items at the same time as removed items', function() {
    var func, passed, pool;
    func = function() {};
    pool = new DiffPool(function(added, removed) {
      return func(added, removed);
    });
    pool.set([
      {
        name: 'bob'
      }
    ]);
    passed = false;
    func = function(added, removed) {
      expect(added).to.have.length.of(1);
      expect(removed).to.have.length.of(1);
      return passed = true;
    };
    pool.set([
      {
        name: 'sue'
      }
    ]);
    return expect(passed).to.be["true"]();
  });
  it('should handle more than one diff in a row', function() {
    var func, passed, pool;
    func = function() {};
    pool = new DiffPool(function(added, removed) {
      return func(added, removed);
    });
    pool.set([
      {
        name: 'bob'
      }, {
        name: 'sue'
      }
    ]);
    passed = false;
    func = function(added, removed) {
      expect(added).to.have.length.of(1);
      expect(removed).to.have.length.of(1);
      return passed = true;
    };
    pool.set([
      {
        name: 'sue'
      }, {
        name: 'mary'
      }
    ]);
    expect(passed).to.be["true"]();
    passed = false;
    pool.set([
      {
        name: 'bob'
      }, {
        name: 'mary'
      }
    ]);
    return expect(passed).to.be["true"]();
  });
  return it('should keep members updated', function() {
    var pool;
    pool = new DiffPool(function() {});
    pool.set([
      {
        name: 'bob'
      }, {
        name: 'sue'
      }
    ]);
    expect(pool.members()).to.have.length.of(2);
    pool.set([
      {
        name: 'bob'
      }, {
        name: 'sue'
      }, {
        name: 'mary'
      }
    ]);
    expect(pool.members()).to.have.length.of(3);
    pool.set([]);
    return expect(pool.members()).to.be.empty();
  });
});
